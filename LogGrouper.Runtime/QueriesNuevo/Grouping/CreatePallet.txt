--STEP2
--SI EXISTE DROPID PARA ESE PEDIDO/TRANSPORTE LO RETORNA, SI NO LO CREA

DECLARE @DROPID NVARCHAR(50)
DECLARE @ORDERSTATUS NVARCHAR(50)
DECLARE @HOSTPROCESSREQUIRED NVARCHAR(50)
DECLARE @TRANSPORT NVARCHAR(50)
DECLARE @TRANSPORT_DESCR NVARCHAR(50)
DECLARE @LOG NVARCHAR(50)
DECLARE @NEW_DROPID NVARCHAR(50)
DECLARE @ORDERGROUP NVARCHAR(50)
DECLARE @GROUP NVARCHAR(50)

IF('{IsEvent}' = '0')
BEGIN
	SELECT @DROPID = DROPID 
	FROM {Scheme}.AGRUPADO_DETALLE AD WHERE NUMEROPEDIDO = '{Order_Id}' AND BULTOS = '{Package_Id}'
END
ELSE
BEGIN
	SELECT @DROPID = DROPID 
	FROM {Scheme}.AGRUPADO_DETALLE AD WHERE NUMEROPEDIDO = '{Order_Id}' AND BULTOS = '{Package_Id}' AND USUARIO = '{User}'	
END

IF (@DROPID IS NULL) --Si no tiene DropId valido que el estado sea 75
BEGIN
	SELECT @ORDERSTATUS = STATUS FROM {Scheme}.ORDERS WHERE REFERENCEDOCUMENT = '{Order_Id}'
	SELECT @ORDERGROUP = ORDERGROUP FROM {Scheme}.ORDERS WHERE REFERENCEDOCUMENT = '{Order_Id}'

		IF((@ORDERSTATUS = '75' AND @ORDERGROUP = '') OR (@ORDERSTATUS = '95' AND @ORDERGROUP = '')) --Si esta en estado 75 y no tenga ordergroup / Si esta en estado 95 agrupo una orden que ya fue expedida
		--IF(@ORDERSTATUS = '75') --Si esta en estado 75 valido que no este cancelado
		BEGIN
			SELECT @HOSTPROCESSREQUIRED = HOSTPROCESSREQUIRED FROM {Scheme}.ORDERS WHERE REFERENCEDOCUMENT = '{Order_Id}'

			IF(@HOSTPROCESSREQUIRED = '0')
			BEGIN
				--Numero de grupo
				SELECT @GROUP = cl.EXT_UDF_STR7
				from {Scheme}.ORDERS o 
				inner join {Scheme}.CODELKUP cl on cl.CODE = {Scheme}.GetNumeric(C_ADDRESS4) and LISTNAME = 'CONFIGFRE1'
				where o.REFERENCEDOCUMENT =  '{Order_Id}'and o.SUSR4 = 'LOGINTER'

				SELECT @TRANSPORT = SUSR4 FROM {Scheme}.ORDERS WHERE REFERENCEDOCUMENT = '{Order_Id}'
				SELECT @TRANSPORT_DESCR = DESCRIPTION FROM {Scheme}.CODELKUP WHERE LISTNAME = 'TRANSPFAR' AND CODE = @TRANSPORT
				
			IF(@GROUP is null)
			BEGIN
				IF('{IsEvent}' = '0')
				BEGIN
					SELECT TOP 1 @LOG = DROPID FROM {Scheme}.DROPID WHERE STATUS = 'AP' AND DROPIDTYPE = '10' AND DRUDF3 = @TRANSPORT
				END
				ELSE				
				BEGIN
					SELECT TOP 1 @LOG = DROPID FROM {Scheme}.DROPID WHERE STATUS = 'AP' AND DROPIDTYPE = '10' AND DRUDF3 = @TRANSPORT AND ADDWHO = '{User}'
				END
			END
			ELSE
			BEGIN
				IF('{IsEvent}' = '0')
				BEGIN
					SELECT TOP 1 @LOG = DROPID FROM {Scheme}.DROPID WHERE STATUS = 'AP' AND DROPIDTYPE = '10' AND DRUDF3 = @TRANSPORT AND EXT_UDF_STR1 = @GROUP
				END
				ELSE
				BEGIN
					SELECT TOP 1 @LOG = DROPID FROM {Scheme}.DROPID WHERE STATUS = 'AP' AND DROPIDTYPE = '10' AND DRUDF3 = @TRANSPORT AND EXT_UDF_STR1 = @GROUP AND ADDWHO = '{User}'
				END
			END

				IF(@LOG IS NULL) --Si no existe pallet en curso lo creo
				BEGIN
					IF(@TRANSPORT = 'LOGINTER')
					BEGIN
						-- Ejecuta directamente el procedimiento almacenado y almacena el resultado en una tabla temporal
						CREATE TABLE #ResultTableLOG (DROPID_NEW NVARCHAR(50))
						INSERT INTO #ResultTableLOG EXEC dbo.[Obtiene_LOG_Agrupado] 'LOG', '{Scheme}'
						-- Obtiene el resultado deseado de la tabla temporal
						SELECT TOP 1 @NEW_DROPID = DROPID_NEW FROM #ResultTableLOG
						-- Elimina la tabla temporal
						DROP TABLE #ResultTableLOG
					END
					ELSE
					BEGIN
						-- Ejecuta directamente el procedimiento almacenado y almacena el resultado en una tabla temporal
						CREATE TABLE #ResultTablePUP (DROPID_NEW NVARCHAR(50))
						INSERT INTO #ResultTablePUP EXEC [dbo].[Obtiene_PUP_Agrupado] 'PUP', '{Scheme}'
						-- Obtiene el resultado deseado de la tabla temporal
						SELECT TOP 1 @NEW_DROPID = DROPID_NEW FROM #ResultTablePUP
						-- Elimina la tabla temporal
						DROP TABLE #ResultTablePUP
					END

					IF(@NEW_DROPID IS NOT NULL) --Si obtengo el nuevo drop id creo el pallet
					BEGIN
						INSERT INTO {Scheme}.DROPID (WHSEID,DROPID,DROPLOC,ADDITIONALLOC,DROPIDTYPE,LABELPRINTED,
						MANIFESTPRINTED,STATUS,ISCLOSED,ADDWHO,DRUDF1,DRUDF2,DRUDF3, EXT_UDF_STR1)
						VALUES ('{Scheme}',@NEW_DROPID,'PICKTO','','10','0','0','AP','N','{User}','{Storerkey}',@TRANSPORT_DESCR,@TRANSPORT, @GROUP)
							
						--SELECT DROPID AS NewDropId FROM {Scheme}.DROPID WHERE DRUDF3 = @TRANSPORT AND DROPID = @NEW_DROPID AND STATUS = 'AP' AND ISCLOSED = 'N'
						SELECT DROPID AS NewDropId, DRUDF2 as TransportDescription FROM {Scheme}.DROPID WHERE DRUDF3 = @TRANSPORT AND DROPID = @NEW_DROPID AND STATUS = 'AP' AND ISCLOSED = 'N'
					END
					ELSE
					BEGIN
						SELECT 'ERROR: No se pudo obtener el log de agrupado.' AS DropId
						RETURN
					END
				END
				ELSE
				BEGIN
					IF('{IsEvent}' = '1')
					BEGIN
						DECLARE @EXISTE NVARCHAR(50)
						SELECT TOP 1 @EXISTE = DROPID FROM {Scheme}.AGRUPADO_DETALLE WHERE NUMEROPEDIDO = '{Order_Id}'
						IF(@EXISTE != @LOG)
						BEGIN
							SELECT 'ERROR: EL PEDIDO CORRESPONDE AL  ' + @EXISTE AS DropId
							RETURN
						END
					END
					SELECT @LOG AS DropId, @TRANSPORT_DESCR TransportDescription
					RETURN
				END
			END
			ELSE
			BEGIN
				SELECT 'ERROR: Pedido cancelado.' AS DropId
				RETURN
			END
		END
		ELSE
		BEGIN
			SELECT 'ERROR: Pedido en estado incorrecto o Pedido agrupado con anterioridad. ' AS DropId
			RETURN
		END
END
ELSE --Si tiene DropId lo retorno
BEGIN
--SELECT @DROPID as DropId

SELECT @ORDERSTATUS = STATUS FROM {Scheme}.ORDERS WHERE REFERENCEDOCUMENT = '{Order_Id}'

IF(@ORDERSTATUS = '95')
BEGIN
	SELECT 'ERROR: EL PEDIDO YA FUE EXPEDIDO EN EL ' + @DROPID AS DropId
	RETURN
END

DECLARE @DROPIDCLOSED NVARCHAR(50)
SELECT @DROPIDCLOSED = DROPID FROM {Scheme}.DROPID where DROPID = @DROPID and status = 'AP' and ISCLOSED = 'N'

IF(@DROPIDCLOSED IS NULL)
BEGIN
	SELECT 'ERROR: ORDEN YA AGRUPADA EN ' + @DROPID AS DropId
	RETURN
END

--SELECT DROPID as DropId, DRUDF2 as TransportDescription FROM {Scheme}.DROPID where DROPID = @DROPID and status = 'AP' and ISCLOSED = 'N'

SELECT 'ERROR: El pedido ya se encuentra agrupado en el pallet ' + @DROPID AS DropId
END



